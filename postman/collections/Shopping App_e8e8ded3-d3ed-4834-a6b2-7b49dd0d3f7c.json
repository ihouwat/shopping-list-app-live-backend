{
	"info": {
		"_postman_id": "a4c9a673-649f-4797-a536-dc87035a2af2",
		"name": "Shopping App",
		"description": "Shopping list app backend API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "10202594-a4c9a673-649f-4797-a536-dc87035a2af2"
	},
	"item": [
		{
			"name": "Functional Testing",
			"item": [
				{
					"name": "Get items on load",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b0d753e-8901-4c83-ad96-7ac687a2ff96",
								"exec": [
									"console.log('get items test');\r",
									"\r",
									"const schema = utils.getSchema('getItemResponseSchema');\r",
									"let responseObj = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 10000ms\", function () {\r",
									"    // Server might be asleep and need to startup\r",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
									"});\r",
									"\r",
									"pm.test(\"Has JSON body\", () => {\r",
									"   pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"pm.test(\"Schema is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"retrieves a list of 25 favorite items\", () => {\r",
									"    pm.expect(responseObj.favoriteItems.length).to.equal(25);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9ee30752-3aa5-4563-aba6-b3289aa2e95b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70ad9589-dbf7-42ef-800d-d31219d101a5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								""
							]
						}
					},
					"response": [
						{
							"id": "b8568bd6-6347-4f75-9dc3-eaa50d1536df",
							"name": "App metadata and items retrieved successfully",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"items\": [\n\t\t{\n\t\t\t\"name\": \"dolor\",\n\t\t\t\"id\": \"anim\",\n\t\t\t\"count\": -38103208.32009113,\n\t\t\t\"note\": \"sunt veniam\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"do magna\",\n\t\t\t\"id\": \"mollit est laboris\",\n\t\t\t\"count\": 64181450.078927875,\n\t\t\t\"note\": \"nostrud ad id laboris\"\n\t\t}\n\t],\n\t\"completedItems\": [\n\t\t{\n\t\t\t\"name\": \"sit sunt dolor ullamco in\",\n\t\t\t\"id\": \"consectetur\",\n\t\t\t\"count\": 88073214.45899382,\n\t\t\t\"note\": \"consequat amet\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"sint officia\",\n\t\t\t\"id\": \"deserunt occaecat\",\n\t\t\t\"count\": 50032330.22636762,\n\t\t\t\"note\": \"amet id\"\n\t\t}\n\t],\n\t\"favoriteItems\": [\n\t\t{\n\t\t\t\"name\": \"dolore aliquip labore ipsum Lorem\",\n\t\t\t\"isChecked\": true\n\t\t},\n\t\t{\n\t\t\t\"name\": \"laboris nulla culpa\",\n\t\t\t\"isChecked\": true\n\t\t}\n\t],\n\t\"groceriesTemplate\": [\n\t\t{\n\t\t\t\"name\": \"occaecat ex incididunt irure eiusmod\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Duis dolore culpa labore\"\n\t\t}\n\t],\n\t\"groceryStoreModel\": [\n\t\t{\n\t\t\t\"id\": 37597449.79727411,\n\t\t\t\"name\": \"occaecat sunt commodo officia\",\n\t\t\t\"categories\": [\n\t\t\t\t{\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\"ullamco\",\n\t\t\t\t\t\t\"enim magna sunt ut\"\n\t\t\t\t\t],\n\t\t\t\t\t\"category\": \"dolor veniam\",\n\t\t\t\t\t\"storeOrder\": 67747206.58808583\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\"sed ex laborum magna\",\n\t\t\t\t\t\t\"consec\"\n\t\t\t\t\t],\n\t\t\t\t\t\"category\": \"sed eni\",\n\t\t\t\t\t\"storeOrder\": 65773789.58771694\n\t\t\t\t}\n\t\t\t]\n\t\t},\n\t\t{\n\t\t\t\"id\": -94130925.11047748,\n\t\t\t\"name\": \"cupidatat anim\",\n\t\t\t\"categories\": [\n\t\t\t\t{\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\"ipsum enim\",\n\t\t\t\t\t\t\"ut dolor sunt aute magna\"\n\t\t\t\t\t],\n\t\t\t\t\t\"category\": \"amet magna esse adipisicing\",\n\t\t\t\t\t\"storeOrder\": -95218148.33489959\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"items\": [\n\t\t\t\t\t\t\"dolor laboris Lorem\",\n\t\t\t\t\t\t\"magna ullamco nostrud elit\"\n\t\t\t\t\t],\n\t\t\t\t\t\"category\": \"sit irure\",\n\t\t\t\t\t\"storeOrder\": -8775663.176575229\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t]\n}"
						},
						{
							"id": "fcbfa30c-c039-46cf-9d6b-04f3ca46c49d",
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										""
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
						}
					]
				},
				{
					"name": "Add item to grocery list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "83bb3dfb-6c39-441e-aa47-2283ad3557dc",
								"exec": [
									"console.log('add item to grocery list test');\r",
									"let count = pm.variables.get(\"count\") ? pm.variables.get(\"count\") : 0;\r",
									"\r",
									"if(count < 2){\r",
									"    postman.setNextRequest(\"Add item to grocery list\");\r",
									"    pm.collectionVariables.set('addedItem' + count + '.name', JSON.stringify(pm.response.json().addedItem[0].name));\r",
									"    pm.collectionVariables.set('addedItem' + count + '.id', JSON.stringify(pm.response.json().addedItem[0].id));\r",
									"    pm.collectionVariables.set('addedItem' + count + '.note', JSON.stringify(pm.response.json().addedItem[0].note));\r",
									"    pm.collectionVariables.set('addedItem' + count + '.count', JSON.stringify(pm.response.json().addedItem[0].count));\r",
									"    count += 1;\r",
									"    pm.variables.set(\"count\",count);\r",
									"\r",
									"    const schema = utils.getSchema('addItemResponseSchema');\r",
									"    const responseObj = pm.response.json().addedItem[0];\r",
									"    const requestObj = JSON.parse(pm.request.body.raw);\r",
									"\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Response time is less than 200ms\", function () {\r",
									"        pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Has JSON body\", () => {\r",
									"    pm.response.to.have.jsonBody;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Schema is valid\", () => {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"\r",
									"    pm.test(\"item should have count of 1\", () => {\r",
									"        pm.expect(responseObj.count).to.equal(1);\r",
									"    });\r",
									"\r",
									"    pm.test(\"item name should match name from request\", () => {\r",
									"        pm.expect(responseObj.name).to.equal(requestObj.name);\r",
									"    });\r",
									"\r",
									"} else {\r",
									"    pm.variables.set(\"count\", 0);\r",
									"};"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "14293546-9b13-485a-b8dc-98eab00a6082",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "db99926a-71e6-486b-a67b-c263d0edbd34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"{{itemName}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/additem",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"additem"
							]
						}
					},
					"response": [
						{
							"id": "d654863a-3aa8-4108-bc7b-64d5139999f6",
							"name": "Item added successfully",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"nulla laboris\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/additem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"additem"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"addedItem\": [\n\t\t{\n\t\t\t\"name\": \"do non \",\n\t\t\t\"id\": \"anim ipsum minim\",\n\t\t\t\"count\": 51703929.46214241,\n\t\t\t\"note\": \"labore qui ut\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"id minim\",\n\t\t\t\"id\": \"adipisicing et\",\n\t\t\t\"count\": -86202848.37290102,\n\t\t\t\"note\": \"sunt cupidatat Ut\"\n\t\t}\n\t]\n}"
						},
						{
							"id": "efac8c9f-328e-4740-b014-21ef6612f1b1",
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"nulla laboris\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/additem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"additem"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
						}
					]
				},
				{
					"name": "Update store category",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd325772-52cf-4f36-b07e-634c5440b7bc",
								"exec": [
									"console.log('update store category test');\r",
									"const schema = utils.getSchema('updateStoreCategoriesResponseSchema');\r",
									"let responseObj = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 400ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Has JSON body\", () => {\r",
									"   pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"pm.test(\"schema is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"items are in order: id of first item is 1, id of second item is 2\", () => {\r",
									"    pm.expect(pm.response.json().updatedModel[0].id).to.equal(1);\r",
									"    pm.expect(pm.response.json().updatedModel[1].id).to.equal(2);\r",
									"});\r",
									"\r",
									"pm.test(\"item added to correct store category\", () => {\r",
									"    console.log('item added to store category is ' + pm.collectionVariables.get('addedItem0.name'));\r",
									"    pm.expect(pm.response.json().updatedModel.find(m => m.name === 'Kroger Frandor').categories.find(c => c.category === 'Produce').items.includes(pm.collectionVariables.get('addedItem0.name'))) \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4c784893-97fc-4d57-84a1-d89e312fe72b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"itemName\": {{addedItem0.name}},\n\t\"stores\": [\n\t\t{\n\t\t\t\"storeName\": \"Kroger Frandor\",\n\t\t\t\"category\": \"Produce\"\n\t\t}\n\t]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/updatestorecategories",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"updatestorecategories"
							]
						}
					},
					"response": [
						{
							"id": "f5247f1b-e1d6-41c4-8cbc-6d452a6369d3",
							"name": "Item recovered successfully",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"itemName\": \"laboris\",\n\t\"stores\": [\n\t\t{\n\t\t\t\"storeName\": \"Lor\",\n\t\t\t\"category\": \"aliquip dolore\"\n\t\t},\n\t\t{\n\t\t\t\"storeName\": \"sed\",\n\t\t\t\"category\": \"commodo cillum non\"\n\t\t}\n\t]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/updatestorecategories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"updatestorecategories"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"updatedModel\": {\n\t\t\"id\": 94118617.32989845,\n\t\t\"name\": \"eiusmod\",\n\t\t\"categories\": [\n\t\t\t{\n\t\t\t\t\"items\": [\n\t\t\t\t\t\"veniam\",\n\t\t\t\t\t\"esse ea commodo\"\n\t\t\t\t],\n\t\t\t\t\"category\": \"mollit veniam\",\n\t\t\t\t\"storeOrder\": -75131724.2335631\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"items\": [\n\t\t\t\t\t\"dolore laboris\",\n\t\t\t\t\t\"exercitation in labore\"\n\t\t\t\t],\n\t\t\t\t\"category\": \"in id\",\n\t\t\t\t\"storeOrder\": 16308232.592923447\n\t\t\t}\n\t\t]\n\t}\n}"
						},
						{
							"id": "43f1dd7c-c1c6-4f9a-a7f2-a73a01935421",
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"itemName\": \"laboris\",\n\t\"stores\": [\n\t\t{\n\t\t\t\"storeName\": \"Lor\",\n\t\t\t\"category\": \"aliquip dolore\"\n\t\t},\n\t\t{\n\t\t\t\"storeName\": \"sed\",\n\t\t\t\"category\": \"commodo cillum non\"\n\t\t}\n\t]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/updatestorecategories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"updatestorecategories"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
						}
					]
				},
				{
					"name": "Update an item",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec646117-7996-4292-84cc-4e87bebf0e98",
								"exec": [
									"console.log('update an item test');\r",
									"const schema = utils.getSchema('updateItemResponseSchema');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has JSON body\", () => {\r",
									"   pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"pm.test(\"schema is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"updated object reflects changes\", () => {\r",
									"    pm.expect(pm.response.json().updatedItem[0].note).to.equal('a new note was added');\r",
									"    pm.expect(pm.response.json().updatedItem[0].count).to.equal(3);\r",
									"    pm.expect(JSON.stringify(pm.response.json().updatedItem[0].id)).to.equal(pm.collectionVariables.get('addedItem0.id'));\r",
									"    pm.expect(JSON.stringify(pm.response.json().updatedItem[0].name)).to.equal(pm.collectionVariables.get('addedItem0.name'));\r",
									"});\r",
									"\r",
									"pm.test('Check items in grocery list', () => {\r",
									"    pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"        const response = res.json();\r",
									"        pm.test('item has been updated in database', () => {\r",
									"            pm.expect(response.items.find(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem0.id')).count).to.equal(3)\r",
									"            pm.expect(response.items.find(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem0.id')).note).to.equal('a new note was added');\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8a7ba8cb-5974-47a2-a52d-144c968945db",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "8a631ebf-e055-4495-8505-d0724aa201e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": {{addedItem0.id}},\n\t\"count\": 3,\n\t\"note\": \"a new note was added\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/updateitem",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"updateitem"
							]
						}
					},
					"response": [
						{
							"id": "cda67873-0790-486e-8b53-6ef3d1e0f64b",
							"name": "Item recovered successfully",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"reprehenderit et sit ex\",\n\t\"count\": 41335124.41065371,\n\t\"note\": \"id et\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/updateitem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"updateitem"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"updatedItem\": {\n\t\t\"name\": \"officia laborum aliquip nostrud\",\n\t\t\"id\": \"dolore\",\n\t\t\"count\": -20231064.542687133,\n\t\t\"note\": \"dolore consectetur consequat\"\n\t}\n}"
						},
						{
							"id": "0bd15564-016e-486b-9e65-6e4635495d32",
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"id\": \"reprehenderit et sit ex\",\n\t\"count\": 41335124.41065371,\n\t\"note\": \"id et\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/updateitem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"updateitem"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
						}
					]
				},
				{
					"name": "Complete item from grocery list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "58eca563-d0dc-49fb-be08-76e67faed47e",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a3e246e7-48d8-4a47-a3b6-d1d635659815",
								"exec": [
									"console.log('complete an item test');\r",
									"const schema = utils.getSchema('completeItemResponseSchema');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has JSON body\", () => {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"pm.test(\"schema is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Response returns item id\", () => {\r",
									"    pm.expect(pm.response.json().completedItemId).to.equal(JSON.parse(pm.collectionVariables.get('addedItem0.id')));\r",
									"});\r",
									"\r",
									"pm.test('Check item has moved to completed items list', () => {\r",
									"    pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"        const response = res.json();\r",
									"        pm.test('item is no longer in items list', () => {\r",
									"            pm.expect(response.items.find(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem0.id'))).to.equal(undefined)\r",
									"        });\r",
									"        pm.test('item is in completed items list', () => {\r",
									"            pm.expect(response.completedItems.filter(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem0.id')).length).to.equal(1);\r",
									"        });\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ab16f347-a8e4-432f-8825-57f24c4ef826",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"item\": {\n        \"name\": {{addedItem0.name}},\n        \"id\": {{addedItem0.id}},\n        \"note\": {{addedItem0.note}},\n        \"count\": {{addedItem1.count}}\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/completeitem",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"completeitem"
							]
						}
					},
					"response": [
						{
							"id": "508dcc77-4f7f-4566-a6a9-00bab45ba8e5",
							"name": "Item completed successfully",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"item\": {\n\t\t\"name\": \"deserunt adipisicing\",\n\t\t\"id\": \"in amet Excepteur non\",\n\t\t\"count\": 61189285.21346122,\n\t\t\"note\": \"dolore Ut\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/completeitem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"completeitem"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"completedItemId\": \"cillum ut ad id Duis\"\n}"
						},
						{
							"id": "b30273b3-4010-4201-9f27-951730cc5a0a",
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"item\": {\n\t\t\"name\": \"deserunt adipisicing\",\n\t\t\"id\": \"in amet Excepteur non\",\n\t\t\"count\": 61189285.21346122,\n\t\t\"note\": \"dolore Ut\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/completeitem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"completeitem"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
						}
					]
				},
				{
					"name": "Recover one completed item to main grocery list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6979adf-df29-44df-b3a9-d92d3ef4d8d9",
								"exec": [
									"console.log('recover an item test');\r",
									"const schema = utils.getSchema('recoveredItemResponseSchema');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has JSON body\", () => {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"pm.test(\"schema is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test('Check item has moved back to items list', () => {\r",
									"    pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"        const response = res.json();\r",
									"        pm.test('item is no longer in completed items list', () => {\r",
									"            pm.expect(response.completedItems.find(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem0.id'))).to.equal(undefined);\r",
									"        });\r",
									"        pm.test('item is in items list', () => {\r",
									"            pm.expect(response.items.filter(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem0.id')).length).to.equal(1)\r",
									"        });\r",
									"\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "b626009b-3264-4e66-9ab8-ee0a67d2e2f8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"item\": {\n        \"name\": {{addedItem0.name}},\n        \"id\": {{addedItem0.id}},\n        \"note\": {{addedItem0.note}},\n        \"count\": {{addedItem1.count}}\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/recoveritem",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"recoveritem"
							]
						}
					},
					"response": [
						{
							"id": "628ad596-8c73-4ce5-a144-b3f8dae8718b",
							"name": "Item recovered successfully",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"item\": {\n\t\t\"name\": \"deserunt adipisicing\",\n\t\t\"id\": \"in amet Excepteur non\",\n\t\t\"count\": 61189285.21346122,\n\t\t\"note\": \"dolore Ut\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/recoveritem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recoveritem"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"recoveredItem\": {\n\t\t\"name\": \"quis culpa \",\n\t\t\"id\": \"nostrud et ipsum eu\",\n\t\t\"count\": 97204293.76157513,\n\t\t\"note\": \"fugiat dolor\"\n\t}\n}"
						},
						{
							"id": "b14110c2-4de9-4ee9-8fed-5c0ef1a8de6d",
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"item\": {\n\t\t\"name\": \"deserunt adipisicing\",\n\t\t\"id\": \"in amet Excepteur non\",\n\t\t\"count\": 61189285.21346122,\n\t\t\"note\": \"dolore Ut\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/recoveritem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recoveritem"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
						}
					]
				},
				{
					"name": "Delete an item from either the grocery list or the completed list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9901bb85-9e9c-4aff-a75f-f8d39d92a23a",
								"exec": [
									"console.log('delete an item test');\r",
									"const schema = utils.getSchema('deleteItemResponseSchema');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has JSON body\", () => {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"pm.test(\"schema is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test(\"Item is no longer in grocery list\", () => {\r",
									"    pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"        console.log('confirming deleted '+ pm.collectionVariables.get('addedItem0.addedItem0.name'));\r",
									"        const response = res.json();    \r",
									"        pm.test('item is no longer in items list', () => {\r",
									"            pm.expect(response.items.filter(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem0.id')).length).to.equal(0)\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									"// Clean up collection variables related to deleted item\r",
									"console.log('cleaning up collection variables related to the deleted item ' + pm.collectionVariables.get('addedItem0.name'));\r",
									"pm.collectionVariables.values.filter(i => i.key.includes('addedItem0')).forEach(item => pm.collectionVariables.unset(item.key));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "763c2ef2-164d-4f94-823b-6fdaae607c6b",
								"exec": [
									"pm.test(\"Checking if item is in list before running DELETE test\", () => {\r",
									"    pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"        const response = res.json();\r",
									"        const foundItem = response.items.filter(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem0.id'));\r",
									"        pm.test('item is in grocer list before delete operation', () => {\r",
									"            pm.expect(foundItem.length).to.equal(1)\r",
									"        });\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "24e9912d-b945-4f04-a439-bf6c8f6dae72",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"listName\": \"items\",\n    \"id\": {{addedItem0.id}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BASE_URL}}/deleteitem",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"deleteitem"
							]
						}
					},
					"response": [
						{
							"id": "ffaf173e-215f-40cd-b58c-1bae67f4c369",
							"name": "Item deleted successfully",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"listName\": \"dolor dolore et in\",\n\t\"item\": {\n\t\t\"name\": \"minim\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deleteitem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deleteitem"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"listName\": \"dolore sed reprehenderit aliqua\",\n\t\"deletedItem\": {\n\t\t\"name\": \"sint\"\n\t}\n}"
						},
						{
							"id": "48088f8c-51cf-4e26-87c1-454547003902",
							"name": "Bad request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"listName\": \"dolor dolore et in\",\n\t\"item\": {\n\t\t\"name\": \"minim\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/deleteitem",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deleteitem"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
						}
					]
				},
				{
					"name": "Recover all completed items to main grocery list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "662d0c03-b778-47db-b5ed-505763f1701e",
								"exec": [
									"const name = JSON.parse(pm.collectionVariables.get('addedItem1.name'));\r",
									"const id = JSON.parse(pm.collectionVariables.get('addedItem1.id'));\r",
									"const note = JSON.parse(pm.collectionVariables.get('addedItem1.note'));\r",
									"const count = JSON.parse(pm.collectionVariables.get('addedItem1.count'));\r",
									"\r",
									"pm.test(\"Checking desired item is still in items list\", () => {\r",
									"    pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"    const response = res.json();\r",
									"        pm.test('items still in grocery list', () => {\r",
									"            pm.expect(response.items.filter(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem1.id')).length).to.equal(1);\r",
									"            \r",
									"            pm.test(\"Completing second item before running test on recoverallcompleted endpoint\", () => {\r",
									"                pm.sendRequest(utils.completeItemRequest(name, id, note, count), (err, res) => {\r",
									"                    const completedItemId = JSON.stringify(res.json().completedItemId);\r",
									"                    pm.expect(completedItemId).to.equal(pm.collectionVariables.get('addedItem1.id'));\r",
									"\r",
									"                    pm.test('checking items list does not include that completed item', () => {\r",
									"                        pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"                        const response = res.json();\r",
									"                            pm.test('item no longer in grocery list', () => {\r",
									"                                pm.expect(response.items.filter(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem1.id')).length).to.equal(0);\r",
									"                            });\r",
									"                        });\r",
									"                    });\r",
									"                });\r",
									"            });\r",
									"        })\r",
									"    });\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb5a0a62-c175-4f31-bfb9-e22f1b353570",
								"exec": [
									"console.log('recover all completed items test');\r",
									"const schema = utils.getSchema('recoverAllCompletedResponseSchema');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has JSON body\", () => {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"pm.test(\"schema is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test('Check completed items list is empty and recovered items in items list', () => {\r",
									"    pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"        const response = res.json();\r",
									"        pm.test('completed items list is empty', () => {\r",
									"            pm.expect(response.completedItems.length).to.equal(0);\r",
									"        });\r",
									"        pm.test('recovered items in grocery list', () => {\r",
									"            pm.expect(response.items.filter(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem1.id')).length).to.equal(1);\r",
									"        })\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "824b0974-512b-4e66-a14d-041234e99e33",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/recoverallcompleted",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"recoverallcompleted"
							]
						}
					},
					"response": [
						{
							"id": "23f1f7a8-8097-44dc-8f85-e13082b40037",
							"name": "Items recovered successfully",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recoverallcompleted",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recoverallcompleted"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"items\": [\n\t\t{\n\t\t\t\"name\": \"elit\",\n\t\t\t\"id\": \"culpa aliquip elit\",\n\t\t\t\"count\": 5051746.593604326,\n\t\t\t\"note\": \"aliquip sit deserunt\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"\",\n\t\t\t\"id\": \"ut dolor\",\n\t\t\t\"count\": 42998609.83004221,\n\t\t\t\"note\": \"anim Ut s\"\n\t\t}\n\t]\n}"
						},
						{
							"id": "5b6604e1-3840-4b3a-ba0e-a8d1b96a59f1",
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recoverallcompleted",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recoverallcompleted"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
						}
					]
				},
				{
					"name": "Delete all completed items from grocery list",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7c6a9199-9226-42f3-9d46-4c708b9bcf61",
								"exec": [
									"const name = JSON.parse(pm.collectionVariables.get('addedItem1.name'));\r",
									"const id = JSON.parse(pm.collectionVariables.get('addedItem1.id'));\r",
									"const note = JSON.parse(pm.collectionVariables.get('addedItem1.note'));\r",
									"const count = JSON.parse(pm.collectionVariables.get('addedItem1.count'));\r",
									"\r",
									"pm.test(\"Checking desired item is still in items list\", () => {\r",
									"    pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"    const response = res.json();\r",
									"        pm.test('items still in grocery list', () => {\r",
									"            pm.expect(response.items.filter(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem1.id')).length).to.equal(1);\r",
									"            pm.test(\"Completing second item before running test on deleteallcompleted endpoint\", () => {\r",
									"                pm.sendRequest(utils.completeItemRequest(name, id, note, count), (err, res) => {\r",
									"                    const completedItemId = JSON.stringify(res.json().completedItemId);\r",
									"                    pm.expect(completedItemId).to.equal(pm.collectionVariables.get('addedItem1.id'));\r",
									"\r",
									"                    pm.test('checking items list does not include that completed item', () => {\r",
									"                        pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"                        const response = res.json();\r",
									"                            pm.test('item no longer in grocery list', () => {\r",
									"                                pm.expect(response.items.filter(i => JSON.stringify(i.id) === pm.collectionVariables.get('addedItem1.id')).length).to.equal(0);\r",
									"                            });\r",
									"                        });\r",
									"                    });\r",
									"                });\r",
									"            });\r",
									"        })\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "35c21a07-7010-4609-9d03-709996c29076",
								"exec": [
									"console.log('delete all completed items test');\r",
									"const schema = utils.getSchema('deleteAllItemsResponseSchema');\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Has JSON body\", () => {\r",
									"    pm.response.to.have.jsonBody;\r",
									"});\r",
									"\r",
									"pm.test(\"schema is valid\", () => {\r",
									"    pm.response.to.have.jsonSchema(schema)\r",
									"});\r",
									"\r",
									"pm.test('Check completed items list is empty', () => {\r",
									"    pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"        const response = res.json();\r",
									"        pm.test('completed items list is empty', () => {\r",
									"            pm.expect(response.completedItems.length).to.equal(0);\r",
									"        });\r",
									"    });\r",
									"})\r",
									"\r",
									"console.log('cleaning up transient collection variables for next run')\r",
									"const valuesToKeep = [pm.collectionVariables.get('baseUrl'), pm.collectionVariables.get('itemName'), pm.collectionVariables.get('schema')];\r",
									"pm.collectionVariables.values.filter(i => !valuesToKeep.includes(i.value)).forEach(item => pm.collectionVariables.unset(item.key));\r",
									"if(pm.environment.get('ENVIRONMENT') !== 'production')  {\r",
									"\r",
									"console.log(`cleaning up items list in ${pm.environment.get('ENVIRONMENT')} environment`);\r",
									"pm.sendRequest(utils.getItemsRequest(), (err, res) => {\r",
									"        const response = res.json();\r",
									"        response.items.forEach(i => pm.sendRequest(utils.deleteItemRequest(i.id, 'items')));\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "833abb43-5dcc-43b7-8f63-1ccff75dce2a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{BASE_URL}}/deleteallcompleted",
							"host": [
								"{{BASE_URL}}"
							],
							"path": [
								"deleteallcompleted"
							]
						}
					},
					"response": [
						{
							"id": "b1042969-bde7-49ec-935b-25f72f7326a1",
							"name": "Items deleted successfully",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deleteallcompleted",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deleteallcompleted"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"id": "49973a89-7a3e-4e55-92ee-d4372b5fc286",
							"name": "Bad request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/deleteallcompleted",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"deleteallcompleted"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
						}
					]
				}
			],
			"id": "5fc6216e-3735-4008-a48a-e3b44247c478"
		},
		{
			"name": "400",
			"item": [
				{
					"name": "POST item",
					"item": [
						{
							"name": "empty body value",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae326860-bd33-414f-b87a-4be608319a94",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45c6b300-592c-4304-aa26-84a93afdbd20",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message\", () => {\r",
											"    pm.expect(pm.response.json()).to.include({error: \"\\\"name\\\" is not allowed to be empty\"});\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "a67f4788-34fb-4f0a-9861-ee97b9d9c915",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/additem",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"additem"
									]
								}
							},
							"response": [
								{
									"id": "28c0abb9-e632-4e64-a182-181e88bf74ac",
									"name": "Item added successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"nulla laboris\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/additem",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"additem"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"addedItem\": [\n\t\t{\n\t\t\t\"name\": \"do non \",\n\t\t\t\"id\": \"anim ipsum minim\",\n\t\t\t\"count\": 51703929.46214241,\n\t\t\t\"note\": \"labore qui ut\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"id minim\",\n\t\t\t\"id\": \"adipisicing et\",\n\t\t\t\"count\": -86202848.37290102,\n\t\t\t\"note\": \"sunt cupidatat Ut\"\n\t\t}\n\t]\n}"
								},
								{
									"id": "bb7dda39-3b84-4241-bd0f-a3c71517a86e",
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"nulla laboris\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/additem",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"additem"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
								}
							]
						},
						{
							"name": "wrong type",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae326860-bd33-414f-b87a-4be608319a94",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45c6b300-592c-4304-aa26-84a93afdbd20",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message\", () => {\r",
											"    pm.expect(pm.response.json()).to.include({error: \"\\\"name\\\" must be a string\"});\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2a69b0b3-de69-414c-83bc-0990a48f0144",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"name\": 2\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/additem",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"additem"
									]
								}
							},
							"response": [
								{
									"id": "7be058f4-0105-45f3-aaf6-c466eb6eb1b6",
									"name": "Item added successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"nulla laboris\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/additem",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"additem"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"addedItem\": [\n\t\t{\n\t\t\t\"name\": \"do non \",\n\t\t\t\"id\": \"anim ipsum minim\",\n\t\t\t\"count\": 51703929.46214241,\n\t\t\t\"note\": \"labore qui ut\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"id minim\",\n\t\t\t\"id\": \"adipisicing et\",\n\t\t\t\"count\": -86202848.37290102,\n\t\t\t\"note\": \"sunt cupidatat Ut\"\n\t\t}\n\t]\n}"
								},
								{
									"id": "a228b775-f27b-476f-b17e-63b257cbdd58",
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"nulla laboris\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/additem",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"additem"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
								}
							]
						},
						{
							"name": "field required",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ae326860-bd33-414f-b87a-4be608319a94",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "45c6b300-592c-4304-aa26-84a93afdbd20",
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message\", () => {\r",
											"    pm.expect(pm.response.json()).to.include({error: \"\\\"name\\\" is required\"});\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "19d3c5e3-c863-4d95-9066-ea5c434acfdd",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{BASE_URL}}/additem",
									"host": [
										"{{BASE_URL}}"
									],
									"path": [
										"additem"
									]
								}
							},
							"response": [
								{
									"id": "95b85b3c-bc25-4d05-aa52-8b4989a264a7",
									"name": "Item added successfully",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"nulla laboris\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/additem",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"additem"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"addedItem\": [\n\t\t{\n\t\t\t\"name\": \"do non \",\n\t\t\t\"id\": \"anim ipsum minim\",\n\t\t\t\"count\": 51703929.46214241,\n\t\t\t\"note\": \"labore qui ut\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"id minim\",\n\t\t\t\"id\": \"adipisicing et\",\n\t\t\t\"count\": -86202848.37290102,\n\t\t\t\"note\": \"sunt cupidatat Ut\"\n\t\t}\n\t]\n}"
								},
								{
									"id": "d4a3bde3-3518-4396-ad43-df20425da16d",
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"name\": \"nulla laboris\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/additem",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"additem"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n\t\"error\": \"culpa\",\n\t\"statusCode\": 46176524.43310639\n}"
								}
							]
						}
					],
					"id": "f52d2ea3-cc0a-4a35-acb6-45b44d912698"
				}
			],
			"id": "2b9d3242-585c-489e-b45b-a5d2d823f28f"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8169da17-0b6e-4170-9eb8-2ce902d0d83a",
				"type": "text/javascript",
				"exec": [
					"utils = {",
					"    getSchema(schema) {",
					"        return JSON.parse(pm.variables.get('schema')).components.schemas[schema];",
					"    },",
					"    getItemsRequest() {",
					"        return {",
					"            url: pm.environment.get('BASE_URL') + '/',",
					"            method: 'GET',",
					"            header: {",
					"                \"Content-Type\": \"application/json\"",
					"            }",
					"        }",
					"    },",
					"    completeItemRequest(name, id, note, count) {",
					"        return {",
					"            url: pm.environment.get('BASE_URL') + '/completeitem',",
					"            method: 'PUT',",
					"            header: {",
					"                \"X-Powered-By\": \"Express\",",
					"                \"Content-Type\": \"application/json\",",
					"                \"Accept\": \"*/*\",",
					"                \"Accept-encoding\": \"gzip, deflate, br\"",
					"            },",
					"            body: {",
					"                mode: 'application/json',",
					"                raw: {",
					"                    \"item\": {",
					"                        \"name\": name,",
					"                        \"id\": id,",
					"                        \"note\": note,",
					"                        \"count\": count",
					"                    }",
					"                }",
					"            }",
					"        }",
					"    },",
					"    deleteItemRequest(id, list) {",
					"        return {",
					"            url: pm.environment.get('BASE_URL') + '/deleteitem',",
					"            method: 'DELETE',",
					"            header: {",
					"                \"Content-Type\": \"application/json\",",
					"                \"Accept\": \"*/*\",",
					"            },",
					"            body: {",
					"                mode: 'application/json',",
					"                raw: {",
					"                    \"listName\": list,",
					"                    \"id\": id",
					"                }",
					"            }",
					"        }",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e6ce5cca-8967-43c9-9c2a-036e67791b34",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a8a55102-eb02-4b66-b9c7-1a0dc02b6f44",
			"key": "schema",
			"value": "{\n    \"openapi\": \"3.1.0\",\n    \"info\": {\n        \"title\": \"Shopping App\",\n        \"version\": \"1.0.0\",\n        \"description\": \"Shopping list app backend API\",\n        \"license\": {\n            \"name\": \"All Rights Reserved\"\n        }\n    },\n    \"components\": {\n        \"schemas\": {\n            \"itemNameSchema\": {\n                \"required\": [\n                    \"name\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"name\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"itemSchema\": {\n                \"required\": [\n                    \"item\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"item\": {\n                        \"required\": [\n                            \"name\",\n                            \"id\",\n                            \"count\"\n                        ],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"id\": {\n                                \"type\": \"string\"\n                            },\n                            \"note\": {\n                                \"type\": \"string\"\n                            },\n                            \"count\": {\n                                \"type\": \"number\"\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"deleteItemSchema\": {\n                \"required\": [\n                    \"listName\",\n                    \"id\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"listName\": {\n                        \"type\": \"string\"\n                    },\n                    \"id\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"updateItemSchema\": {\n                \"required\": [\n                    \"id\",\n                    \"count\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"string\"\n                    },\n                    \"note\": {\n                        \"type\": \"string\"\n                    },\n                    \"count\": {\n                        \"type\": \"number\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"updateStoreCategoriesSchema\": {\n                \"required\": [\n                    \"itemName\",\n                    \"stores\"\n                ],\n                \"type\": \"object\",\n                \"properties\": {\n                    \"itemName\": {\n                        \"type\": \"string\"\n                    },\n                    \"stores\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"required\": [\n                                \"storeName\",\n                                \"category\"\n                            ],\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"storeName\": {\n                                    \"type\": \"string\"\n                                },\n                                \"category\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"addItemResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"addedItem\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"required\": [\n                                \"name\",\n                                \"id\",\n                                \"count\"\n                            ],\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"id\": {\n                                    \"type\": \"string\"\n                                },\n                                \"note\": {\n                                    \"type\": \"string\"\n                                },\n                                \"count\": {\n                                    \"type\": \"number\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"getItemResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"items\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"required\": [\n                                \"name\",\n                                \"id\",\n                                \"count\"\n                            ],\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"id\": {\n                                    \"type\": \"string\"\n                                },\n                                \"note\": {\n                                    \"type\": \"string\"\n                                },\n                                \"count\": {\n                                    \"type\": \"number\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    },\n                    \"completedItems\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"required\": [\n                                \"name\",\n                                \"id\",\n                                \"count\"\n                            ],\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"id\": {\n                                    \"type\": \"string\"\n                                },\n                                \"note\": {\n                                    \"type\": \"string\"\n                                },\n                                \"count\": {\n                                    \"type\": \"number\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    },\n                    \"favoriteItems\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"isChecked\": {\n                                    \"type\": \"boolean\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    },\n                    \"groceriesTemplate\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    },\n                    \"groceryStoreModel\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"id\": {\n                                    \"type\": \"number\"\n                                },\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"categories\": {\n                                    \"oneOf\": [\n                                        {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"items\": {\n                                                        \"type\": \"array\",\n                                                        \"items\": {\n                                                            \"type\": \"string\"\n                                                        }\n                                                    },\n                                                    \"category\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"storeOrder\": {\n                                                        \"type\": \"number\"\n                                                    }\n                                                },\n                                                \"additionalProperties\": false\n                                            }\n                                        },\n                                        {\n                                            \"type\": \"null\"\n                                        }\n                                    ]\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"completeItemResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"completedItemId\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"deleteItemResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"listName\": {\n                        \"type\": \"string\"\n                    },\n                    \"deletedItem\": {\n                        \"required\": [\n                            \"name\",\n                            \"id\",\n                            \"count\"\n                        ],\n                        \"type\": \"object\",\n                        \"properties\": {\n                            \"name\": {\n                                \"type\": \"string\"\n                            },\n                            \"id\": {\n                                \"type\": \"string\"\n                            },\n                            \"note\": {\n                                \"type\": \"string\"\n                            },\n                            \"count\": {\n                                \"type\": \"number\"\n                            }\n                        },\n                        \"additionalProperties\": false\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"recoveredItemResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"recoveredItem\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"required\": [\n                                \"name\",\n                                \"id\",\n                                \"count\"\n                            ],\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"id\": {\n                                    \"type\": \"string\"\n                                },\n                                \"note\": {\n                                    \"type\": \"string\"\n                                },\n                                \"count\": {\n                                    \"type\": \"number\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"deleteAllItemsResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"completeditems\": {\n                        \"maxItems\": 0,\n                        \"minItems\": 0,\n                        \"type\": \"array\",\n                        \"items\": {}\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"updateItemResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"updatedItem\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"id\": {\n                                    \"type\": \"string\"\n                                },\n                                \"note\": {\n                                    \"type\": \"string\"\n                                },\n                                \"count\": {\n                                    \"type\": \"number\"\n                                }\n                            },\n                            \"required\": [\n                                \"name\",\n                                \"id\",\n                                \"count\"\n                            ],\n                            \"additionalProperties\": false\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"updateStoreCategoriesResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"updatedModel\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"id\": {\n                                    \"type\": \"number\"\n                                },\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"categories\": {\n                                    \"oneOf\": [\n                                        {\n                                            \"type\": \"array\",\n                                            \"items\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"items\": {\n                                                        \"type\": \"array\",\n                                                        \"items\": {\n                                                            \"type\": \"string\"\n                                                        }\n                                                    },\n                                                    \"category\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"storeOrder\": {\n                                                        \"type\": \"number\"\n                                                    }\n                                                },\n                                                \"additionalProperties\": false\n                                            }\n                                        },\n                                        {\n                                            \"type\": \"null\"\n                                        }\n                                    ]\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"recoverAllCompletedResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"items\": {\n                        \"type\": \"array\",\n                        \"items\": {\n                            \"required\": [\n                                \"name\",\n                                \"id\",\n                                \"count\"\n                            ],\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"name\": {\n                                    \"type\": \"string\"\n                                },\n                                \"id\": {\n                                    \"type\": \"string\"\n                                },\n                                \"note\": {\n                                    \"type\": \"string\"\n                                },\n                                \"count\": {\n                                    \"type\": \"number\"\n                                }\n                            },\n                            \"additionalProperties\": false\n                        }\n                    },\n                    \"completedItems\": {\n                        \"maxItems\": 0,\n                        \"minItems\": 0,\n                        \"type\": \"array\",\n                        \"items\": {}\n                    }\n                },\n                \"additionalProperties\": false\n            },\n            \"errorResponseSchema\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"error\": {\n                        \"type\": \"string\"\n                    },\n                    \"statusCode\": {\n                        \"type\": \"number\"\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        }\n    },\n    \"servers\": [\n        {\n            \"url\": \"http://localhost:3000\",\n            \"description\": \"Development server\"\n        },\n        {\n            \"url\": \"http://.....\",\n            \"description\": \"Production server\"\n        }\n    ],\n    \"paths\": {\n        \"/additem\": {\n            \"post\": {\n                \"summary\": \"Add item to grocery list\",\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/itemNameSchema\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Item added successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/addItemResponseSchema\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/errorResponseSchema\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/completeitem\": {\n            \"put\": {\n                \"summary\": \"Complete item from grocery list\",\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/itemSchema\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Item completed successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/completeItemResponseSchema\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/errorResponseSchema\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/deleteallcompleted\": {\n            \"delete\": {\n                \"summary\": \"Delete all completed items from grocery list\",\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Items deleted successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/deleteAllItemsResponseSchema\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/errorResponseSchema\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/deleteitem\": {\n            \"delete\": {\n                \"summary\": \"Delete an item from either the grocery list or the completed list\",\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/deleteItemSchema\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Item deleted successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/deleteItemResponseSchema\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/errorResponseSchema\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/\": {\n            \"get\": {\n                \"summary\": \"Get items on load\",\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"App metadata and items retrieved successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/getItemResponseSchema\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/errorResponseSchema\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/recoverallcompleted\": {\n            \"put\": {\n                \"summary\": \"Recover all completed items to main grocery list\",\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Items recovered successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/recoverAllCompletedResponseSchema\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/errorResponseSchema\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/recoveritem\": {\n            \"put\": {\n                \"summary\": \"Recover one completed items to main grocery list\",\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/itemSchema\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Item recovered successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/recoveredItemResponseSchema\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/errorResponseSchema\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/updateitem\": {\n            \"put\": {\n                \"summary\": \"Update an item\",\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/updateItemSchema\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Item recovered successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/updateItemResponseSchema\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/errorResponseSchema\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"/updatestorecategories\": {\n            \"put\": {\n                \"summary\": \"Update store category\",\n                \"tags\": [\n                    \"Items\"\n                ],\n                \"requestBody\": {\n                    \"required\": true,\n                    \"content\": {\n                        \"application/json\": {\n                            \"schema\": {\n                                \"$ref\": \"#/components/schemas/updateStoreCategoriesSchema\"\n                            }\n                        }\n                    }\n                },\n                \"responses\": {\n                    \"200\": {\n                        \"description\": \"Item recovered successfully\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/updateStoreCategoriesResponseSchema\"\n                                }\n                            }\n                        }\n                    },\n                    \"400\": {\n                        \"description\": \"Bad request\",\n                        \"content\": {\n                            \"application/json\": {\n                                \"schema\": {\n                                    \"$ref\": \"#/components/schemas/errorResponseSchema\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    \"tags\": []\n}",
			"type": "string"
		},
		{
			"id": "3873fec3-3fd3-4806-9a3e-e737f0bd2c59",
			"key": "itemName",
			"value": "{{$randomProduct}}{{$randomInt}}{{$randomInt}}",
			"type": "string"
		}
	]
}